datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// for next auth 
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String
  email         String         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Room          Room[]
  RoomEnrolled  RoomEnrolled[]
  Assignment    Assignment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// for classroom app 
model Room {
  id             String         @id @default(cuid())
  name           String
  section        String
  code           String         @unique
  admin          User           @relation(fields: [adminId], references: [id], onDelete: Cascade)
  adminId        String
  created_at     DateTime       @default(now())
  canStudentPost Boolean        @default(true)
  approval       Boolean        @default(true)
  RoomEnrolled   RoomEnrolled[]
  Assignment     Assignment[]
}

//model to track the room where user joins
model RoomEnrolled {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  room       Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId     String
  approved   Boolean  @default(false)
  created_at DateTime @default(now())
}

// models to keep all asignment in room
model Assignment {
  id              String            @id @default(cuid())
  title           String
  description     String?
  user            User              @relation(fields: [userId], references: [id])
  userId          String
  room            Room              @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId          String
  AssignmentFiles AssignmentFiles[]
  created_at      DateTime          @default(now())
}

// models to keep files attached to assignment
model AssignmentFiles {
  id           String     @id @default(cuid())
  url          String
  size         Int
  name         String
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId String
  uploadedAt   DateTime   @default(now())
}
